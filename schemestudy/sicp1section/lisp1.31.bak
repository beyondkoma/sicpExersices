(define (product factorial a next b)
         (if (> a b)
             1
             (* (factorial a)  (product factorial (next a) next b))))

(define (next s)
 (+ s 2))




(define (factorial s)
  (let ( (y (square s) ))
       (/ (- y 1)  (exact->inexact y))))
        
 
      

(define (square s)
  (* s s))


   (define
     (product1 factorial a next b result)
        (cond ( (> a b) result)
             (else (product1 factorial (next a) next b (* result (factorial a))))))
     
   
  
 
 (* 4  (product factorial 3 next 100000000000000))
 ;(* 4  (product1 factorial 3 next 1000000 1))