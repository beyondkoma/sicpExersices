Petite Chez Scheme Version 8.4
Copyright (c) 1985-2011 Cadence Research Systems

> (define (append list1 list2)
    (if (null? list1)
	list2
	(cons (car list1) (append (cdr list1) list2))))
> (define (deep-reverse x)
    (if (pair? x)
	(append (deep-reverse (cdr x) (list (deep-reverse (car x)))))
	x))
> (define x (list 1 (list 1 3 (list 2 3))))
> (deep-reverse x)

Exception: incorrect number of arguments to #<procedure>
Type (debug) to enter the debugger.
> (deep-reverse (list 1 2 3))

Exception: incorrect number of arguments to #<procedure>
Type (debug) to enter the debugger.
> (define (deep-reverse x)
    (if (pair? x)
	(append (deep-reverse (car x) (list (deep-reverse (cdr x)))))
	x))
> (deep-reverse (list 1 2 3))

Exception: incorrect number of arguments to #<procedure>
Type (debug) to enter the debugger.
> (define (deep-reverse x)
    (if (pair? x)
	(append (deep-reverse (cdr x) (list (deep-reverse (car x)))))
	x))
> (deep-reverse (list 1 2 3))

Exception: incorrect number of arguments to #<procedure>
Type (debug) to enter the debugger.
> (append (list 1 2 3) (lsit 1 2 3))

Exception: variable lsit is not bound
Type (debug) to enter the debugger.
> (define (append list1 list2)
    (if (null? list1)
	list2
	(cons (car list1) (append (cdr list1) list2))))
> (append (list 1 23) (list 4 5))
(1 23 4 5)
> (define (deep-reverse x)
    (if (pair? x)
	(append (deep-reverse (cdr x)) (list (deep-reverse (car x))))
	x))
> (deep-reverse (list 1 2 3))

Exception: incorrect number of arguments to #<procedure>
Type (debug) to enter the debugger.
> (append (list 1 23) (list 4 5))
(1 23 4 5)
> (define (deep-reverse x) 
   (if (pair? x) 
       (append (deep-reverse (cdr x))  
               (list (deep-reverse (car x)))) 
       x)) 
> (deep-reverse (list 1 2 3))
(3 2 1)
> (deep-reverse (list 1 (list 1 2 (list  4 5))))
(((5 4) 2 1) 1)
> (define (deep-reverse x)
    (if (pair? x)
	(append (deep-reverse (cdr x)) (list (deep-reverse (car x))))
> (deep-reverse (list 1 2 3))

Exception: incorrect number of arguments to #<procedure>
Type (debug) to enter the debugger.
> (append (deep-reverse (cdr x)) (list (deep-reverse (car x))))

Exception: incorrect number of arguments to #<procedure>
Type (debug) to enter the debugger.
> (append (deep-reverse (cdr x)) (list (deep-reverse (car x))))

Exception: incorrect number of arguments to #<procedure>
Type (debug) to enter the debugger.
> (define (deep-reverse x)
    (if (pair? x)
	(append (deep-reverse (cdr x)) (list (deep-reverse (car x))))
	x))
> (deep-reverse (list 1 2 3))
(3 2 1)
> 